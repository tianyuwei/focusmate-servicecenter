<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.focusmate.services.datasource.mapper.StationMapper">
  <resultMap id="BaseResultMap" type="com.focusmate.services.datasource.entities.Station">
    <id column="Id" jdbcType="INTEGER" property="id" />
    <result column="Address" jdbcType="VARCHAR" property="address" />
    <result column="Latitude" jdbcType="REAL" property="latitude" />
    <result column="Longitude" jdbcType="REAL" property="longitude" />
    <result column="Price" jdbcType="INTEGER" property="price" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="ShortName" jdbcType="VARCHAR" property="shortName" />
    <result column="Status" jdbcType="INTEGER" property="status" />
    <result column="CommandType" jdbcType="INTEGER" property="commandType" />
    <result column="CreateTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="LastModifyTime" jdbcType="TIMESTAMP" property="lastModifyTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  <choose>
                    <when test="criterion.isBinary">
                      and ${criterion.condition} unhex(#{criterion.value})
                    </when>
                    <otherwise>
                      and ${criterion.condition} #{criterion.value}
                    </otherwise>
                  </choose>
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    <choose>
                      <when test="criterion.isBinary">
                        unhex(#{listItem})
                      </when>
                      <otherwise>
                        #{listItem}
                      </otherwise>
                    </choose>
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  <choose>
                    <when test="criterion.isBinary">
                      and ${criterion.condition} unhex(#{criterion.value})
                    </when>
                    <otherwise>
                      and ${criterion.condition} #{criterion.value}
                    </otherwise>
                  </choose>
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    <choose>
                      <when test="criterion.isBinary">
                        unhex(#{listItem})
                      </when>
                      <otherwise>
                        #{listItem}
                      </otherwise>
                    </choose>
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    Id, Address, Latitude, Longitude, Price, name, ShortName, Status, CommandType, CreateTime, 
    LastModifyTime
  </sql>
  <select id="selectByExample" parameterType="com.focusmate.services.datasource.entities.StationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from Station
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="size != null">
      limit
      <if test="offset != null">
        #{offset},
      </if>
      #{size}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from Station
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from Station
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.focusmate.services.datasource.entities.StationExample">
    delete from Station
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.focusmate.services.datasource.entities.Station">
    insert into Station (Id, Address, Latitude, 
      Longitude, Price, name, 
      ShortName, Status, CommandType, 
      CreateTime, LastModifyTime)
    values (#{id,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, #{latitude,jdbcType=REAL}, 
      #{longitude,jdbcType=REAL}, #{price,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{shortName,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{commandType,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{lastModifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.focusmate.services.datasource.entities.Station">
    insert into Station
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        Id,
      </if>
      <if test="address != null">
        Address,
      </if>
      <if test="latitude != null">
        Latitude,
      </if>
      <if test="longitude != null">
        Longitude,
      </if>
      <if test="price != null">
        Price,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="shortName != null">
        ShortName,
      </if>
      <if test="status != null">
        Status,
      </if>
      <if test="commandType != null">
        CommandType,
      </if>
      <if test="createTime != null">
        CreateTime,
      </if>
      <if test="lastModifyTime != null">
        LastModifyTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="latitude != null">
        #{latitude,jdbcType=REAL},
      </if>
      <if test="longitude != null">
        #{longitude,jdbcType=REAL},
      </if>
      <if test="price != null">
        #{price,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="shortName != null">
        #{shortName,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="commandType != null">
        #{commandType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastModifyTime != null">
        #{lastModifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.focusmate.services.datasource.entities.StationExample" resultType="java.lang.Integer">
    select count(*) from Station
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update Station
    <set>
      <if test="record.id != null">
        Id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.address != null">
        Address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.latitude != null">
        Latitude = #{record.latitude,jdbcType=REAL},
      </if>
      <if test="record.longitude != null">
        Longitude = #{record.longitude,jdbcType=REAL},
      </if>
      <if test="record.price != null">
        Price = #{record.price,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.shortName != null">
        ShortName = #{record.shortName,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        Status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.commandType != null">
        CommandType = #{record.commandType,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastModifyTime != null">
        LastModifyTime = #{record.lastModifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update Station
    set Id = #{record.id,jdbcType=INTEGER},
      Address = #{record.address,jdbcType=VARCHAR},
      Latitude = #{record.latitude,jdbcType=REAL},
      Longitude = #{record.longitude,jdbcType=REAL},
      Price = #{record.price,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      ShortName = #{record.shortName,jdbcType=VARCHAR},
      Status = #{record.status,jdbcType=INTEGER},
      CommandType = #{record.commandType,jdbcType=INTEGER},
      CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      LastModifyTime = #{record.lastModifyTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.focusmate.services.datasource.entities.Station">
    update Station
    <set>
      <if test="address != null">
        Address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="latitude != null">
        Latitude = #{latitude,jdbcType=REAL},
      </if>
      <if test="longitude != null">
        Longitude = #{longitude,jdbcType=REAL},
      </if>
      <if test="price != null">
        Price = #{price,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="shortName != null">
        ShortName = #{shortName,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        Status = #{status,jdbcType=INTEGER},
      </if>
      <if test="commandType != null">
        CommandType = #{commandType,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        CreateTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastModifyTime != null">
        LastModifyTime = #{lastModifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.focusmate.services.datasource.entities.Station">
    update Station
    set Address = #{address,jdbcType=VARCHAR},
      Latitude = #{latitude,jdbcType=REAL},
      Longitude = #{longitude,jdbcType=REAL},
      Price = #{price,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      ShortName = #{shortName,jdbcType=VARCHAR},
      Status = #{status,jdbcType=INTEGER},
      CommandType = #{commandType,jdbcType=INTEGER},
      CreateTime = #{createTime,jdbcType=TIMESTAMP},
      LastModifyTime = #{lastModifyTime,jdbcType=TIMESTAMP}
    where Id = #{id,jdbcType=INTEGER}
  </update>
</mapper>